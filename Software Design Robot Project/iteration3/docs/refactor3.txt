
Refactor 3 for Iteration 3
By: Alex Tuckner : 4730040 : tuckn016

The files that I have changed for this refactor are in Robot.cc

I noticed that the TimeStepUpdate for Robot was a bit long 
and could be broken up into a few functions to make the code
simpler to understand and more readable by an outside programmer

I have pulled out this as a funciton:

    if (sensor_touch_robot_.get_is_activated()) {
      set_pos(get_Last_Position());
      motion_handler_robot_.AcceptCollision(sensor_touch_robot_);
      sensor_touch_robot_.set_is_activated(false);
    } else if (get_speed() > 0) {
    set_Second_Last_Position(get_Last_Position());
    set_Last_Position(get_pos());
    }

And put it in a function named UpdateSensorTouch();




I have pulled out this as a function:

     if (sensor_proximity_robot_.get_is_activated()) {
       motion_handler_robot_.AcceptProximity(sensor_proximity_robot_);
       sensor_proximity_robot_.set_is_activated(false);
       sensor_proximity_robot_.set_left(false);
       sensor_proximity_robot_.set_right(false);
       if (get_speed() - 2 < 3){
         set_speed(3);
       } else {
         set_speed(get_speed() - 2);
       }
     } else {
       set_speed(get_default_speed());
     }

And put it in a function named UpdateSensorProximity();


I have also pulled out this as a function:

     if (sensor_distress_robot_.get_is_activated()){
       set_speed(0);
     } else {
       set_speed(get_default_speed());
     }

And put it in a function named UpdateSensorDistress();


Now, I have fianlly pulled these out this as well:

new_pos.set_x(new_pos.get_x() + cos(motion_handler_robot_.get_heading_angle()
                  *M_PI/180.0)*this->get_speed()*dt)
new_pos.set_y(new_pos.get_y() + sin(motion_handler_robot_.get_heading_angle()
                  *M_PI/180.0)*this->get_speed()*dt);
And put it in a function named get_next_x and get_next_y;


My Resulting TimeStepUpdate for Robot is now:

void Robot::TimestepUpdate(uint dt) {

     UpdateSensorTouch();
     UpdateSensorProximity();
     UpdateSensorDistress();

     Position new_pos = this->get_pos();
     Position old_pos = this->get_pos();

     // Movement is always along the heading_angle (i.e. the hypotenuse)
     new_pos.set_x(get_next_x(new_pos.get_x(), dt));
     new_pos.set_y(get_next_y(new_pos.get_y(), dt));
     this->set_pos(new_pos);
  }


  All of these new functions can be found at the bottom of robot.cc

This refactor improves the code because it really simplifies the whole update entities
and make it clear what is happening at each timestep.  For example, first we need to 
update the sensortouch, then the sensorproximity, then the sensorDistress to see if 
any of these sensors have recieved any new data/info.  As with the first refactor, it
also takes a lot of the confusing numbers and math out of the equation and really makes
the whole function look clean




